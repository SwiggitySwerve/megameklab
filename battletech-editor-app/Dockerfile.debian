# Stage 1: Build stage
FROM node:18-slim AS builder

WORKDIR /usr/src/app

# Install Python, pip, and SQLite for database population
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    sqlite3 \
    libsqlite3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy scripts and data needed for DB population
COPY data ./data/

# Run populate_db.py to create and populate the SQLite database
RUN python3 data/populate_db.py

# Now proceed with Node.js app setup
# Copy app's package.json and package-lock.json
COPY package.json ./
COPY package-lock.json ./
# Copy app's tsconfig.json
COPY tsconfig.json ./
# If next.config.ts exists in app
COPY next.config.ts ./

# Install Node.js dependencies using npm ci for reproducible builds
RUN npm ci

# Copy the rest of the application source code
COPY . .

# Build the Next.js application
RUN npm run build

# Stage 2: Production stage
FROM node:18-slim

WORKDIR /usr/src/app

# Install SQLite runtime libraries, crucial for the app to use the SQLite DB
RUN apt-get update && apt-get install -y \
    sqlite3 \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# Set NODE_ENV to production for Next.js
ENV NODE_ENV=production

# Create a non-root user for security
RUN groupadd -r appgroup && useradd -r -g appgroup appuser
USER appuser

# Copy necessary files from the builder stage
# package.json is needed for Next.js to determine how to run 'next start'
COPY --from=builder /usr/src/app/package.json ./package.json
# Copy .next and public directories
COPY --from=builder /usr/src/app/.next ./.next
COPY --from=builder /usr/src/app/public ./public

# Copy the populated SQLite database from the builder stage
COPY --from=builder --chown=appuser:appgroup /usr/src/app/battletech_dev.sqlite ./battletech_dev.sqlite

# Expose the port Next.js runs on (default 3000)
EXPOSE 3000

# Set the command to start the Next.js application
CMD ["npm", "start"]
